{
    "annotations": {
        "list": [
            {
                "builtIn": 1,
                "datasource": {
                    "type": "grafana",
                    "uid": "-- Grafana --"
                },
                "enable": true,
                "hide": true,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "target": {
                    "limit": 100,
                    "matchAny": false,
                    "tags": [],
                    "type": "dashboard"
                },
                "type": "dashboard"
            }
        ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 1,
    "id": 2,
    "links": [],
    "panels": [
        {
            "collapsed": false,
            "gridPos": {
                "h": 1,
                "w": 24,
                "x": 0,
                "y": 0
            },
            "id": 45,
            "panels": [],
            "title": "Flow stats",
            "type": "row"
        },
        {
            "datasource": {
                "type": "postgres",
                "uid": "e22e9e55-8040-415d-97be-c4a6a23429e8"
            },
            "description": "",
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "thresholds"
                    },
                    "custom": {
                        "align": "auto",
                        "cellOptions": {
                            "type": "auto"
                        },
                        "inspect": false
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": null
                            }
                        ]
                    },
                    "unit": "none"
                },
                "overrides": [
                    {
                        "__systemRef": "hideSeriesFrom",
                        "matcher": {
                            "id": "byNames",
                            "options": {
                                "mode": "exclude",
                                "names": [
                                    "PR Lead Time: 90th percentile"
                                ],
                                "prefix": "All except:",
                                "readOnly": true
                            }
                        },
                        "properties": []
                    },
                    {
                        "matcher": {
                            "id": "byRegexp",
                            "options": "/.*Time.*/"
                        },
                        "properties": [
                            {
                                "id": "unit",
                                "value": "none"
                            }
                        ]
                    }
                ]
            },
            "gridPos": {
                "h": 16,
                "w": 24,
                "x": 0,
                "y": 1
            },
            "id": 54,
            "options": {
                "cellHeight": "sm",
                "footer": {
                    "countRows": false,
                    "fields": "",
                    "reducer": [
                        "sum"
                    ],
                    "show": false
                },
                "showHeader": true
            },
            "pluginVersion": "11.3.0",
            "targets": [
                {
                    "datasource": {
                        "type": "postgres",
                        "uid": "e22e9e55-8040-415d-97be-c4a6a23429e8"
                    },
                    "editorMode": "code",
                    "format": "table",
                    "rawQuery": true,
                    "rawSql": "WITH aggregations AS\n(SELECT pr.team_name,\n         pr.project_name,\n         pr.repository_name,\n         pr.pull_request_number,\n         SUM(CASE WHEN participant.is_bot_user THEN 0 ELSE pr_participant.comments_count END) AS participants_comments_count,\n         MIN(CASE\n                  WHEN participant.is_bot_user OR pr_participant.first_reaction_date > pr.merged_date OR\n                     pr_participant.first_reaction_date < pr.shared_for_review_date THEN NULL\n                  ELSE pr_participant.first_reaction_date END) AS first_reaction_date,\n         MAX(CASE WHEN participant.is_bot_user THEN NULL ELSE pr_participant.last_approval_date END) AS last_approval_date,\n         CASE WHEN pr.last_commit_date > pr.shared_for_review_date THEN pr.last_commit_date ELSE NULL END AS last_commit_date\n   FROM pull_request AS pr\n            LEFT JOIN pull_request_participant AS pr_participant ON pr.team_name = pr_participant.team_name AND pr.project_name = pr_participant.project_name AND pr.repository_name = pr_participant.repository_name AND pr.pull_request_number = pr_participant.pull_request_number\n            LEFT JOIN actor AS shadowed_participant ON shadowed_participant.id = pr_participant.participant_id\n            LEFT JOIN actor AS participant ON COALESCE(shadowed_participant.merged_with_id, shadowed_participant.id) = participant.id\n   GROUP BY pr.team_name, pr.project_name, pr.repository_name, pr.pull_request_number,\n            pr.last_commit_date, pr.shared_for_review_date\n)\n\nSELECT \n    $__timeGroupAlias(start_date, $group_by_period), \n    \n    PERCENTILE_CONT(0.90) WITHIN GROUP (ORDER BY pr_lead_time) AS \"PR Lead Time: 90th percentile\",\n    AVG(AVG(pr_lead_time)) OVER (ORDER BY $__timeGroup(start_date, $group_by_period, 0) ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS \"PR Lead Time: Rolling Average\",\n    PERCENTILE_CONT($percentile) WITHIN GROUP (ORDER BY pr_lead_time) AS \"PR Lead Time: ${percentile:text}\",\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY pr_lead_time) AS \"PR Lead Time: 25th Percentile\",\n\n    PERCENTILE_CONT(0.90) WITHIN GROUP (ORDER BY development_time) AS \"Development Time: 90th percentile\",\n    AVG(AVG(development_time)) OVER (ORDER BY $__timeGroup(start_date, $group_by_period, 0) ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS \"Development Time: Rolling Average\",\n    PERCENTILE_CONT($percentile) WITHIN GROUP (ORDER BY development_time) AS \"Development Time: ${percentile:text}\",\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY development_time) AS \"Development Time: 25th Percentile\",\n\n    PERCENTILE_CONT(0.90) WITHIN GROUP (ORDER BY time_to_first_reaction) AS \"Time To First Reaction: 90th percentile\",\n    AVG(AVG(time_to_first_reaction)) OVER (ORDER BY $__timeGroup(start_date, $group_by_period, 0) ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS \"Time To First Reaction: Rolling Average\",\n    PERCENTILE_CONT($percentile) WITHIN GROUP (ORDER BY time_to_first_reaction) AS \"Time To First Reaction: ${percentile:text}\",\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY time_to_first_reaction) AS \"Time To First Reaction: 25th Percentile\",\n\n    PERCENTILE_CONT(0.90) WITHIN GROUP (ORDER BY rework_time) AS \"Rework Time: 90th percentile\",\n    AVG(AVG(rework_time)) OVER (ORDER BY $__timeGroup(start_date, $group_by_period, 0) ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS \"Rework Time: Rolling Average\",\n    PERCENTILE_CONT($percentile) WITHIN GROUP (ORDER BY rework_time) AS \"Rework Time: ${percentile:text}\",\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY rework_time) AS \"Rework Time: 25th Percentile\",\n\n    PERCENTILE_CONT(0.90) WITHIN GROUP (ORDER BY idle_after_approve) AS \"Idle Time After Approve: 90th percentile\",\n    AVG(AVG(idle_after_approve)) OVER (ORDER BY $__timeGroup(start_date, $group_by_period, 0) ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS \"Idle Time After Approve: Rolling Average\",\n    PERCENTILE_CONT($percentile) WITHIN GROUP (ORDER BY idle_after_approve) AS \"Idle Time After Approve: ${percentile:text}\",\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY idle_after_approve) AS \"Idle Time After Approve: 25th Percentile\",\n\n\n   COUNT(*) AS \"PRs count\",\n   COUNT(DISTINCT CASE WHEN author_role = 'MEMBER' THEN author_id END) AS \"Maintainers contributed count\",\n   COUNT(DISTINCT CASE WHEN author_role = 'CONTRIBUTOR' THEN author_id END) AS \"Contributors contributed count\",\n   AVG(requested_reviewers_count) AS \"Average reviewers count\",\n   AVG(participants_comments_count) AS \"Average participants comments count\",\n   SUM(CASE WHEN tests_were_touched THEN 0 ELSE 1 END)::decimal/COUNT(*)*100 AS \"Percent of PRs without tests touches\",\n   AVG(CASE WHEN diff_rows_added+diff_rows_deleted=0 THEN NULL ELSE diff_rows_added+diff_rows_deleted END) AS \"Average PR diff size\",\n   SUM(diff_rows_added+diff_rows_deleted) as \"Total diff for the period\"\n\nFROM \n   (SELECT \n      LEAST(initial_commit_date, shared_for_review_date) AS start_date,\n\n      EXTRACT(EPOCH FROM (merged_date-LEAST(initial_commit_date, shared_for_review_date))) AS pr_lead_time,\n      EXTRACT(EPOCH FROM (shared_for_review_date-initial_commit_date)) AS development_time,\n      GREATEST(EXTRACT(EPOCH FROM (first_reaction_date-shared_for_review_date)), 0) AS time_to_first_reaction,\n      EXTRACT(EPOCH FROM (GREATEST(COALESCE(pr_aggregations.last_commit_date, pr_aggregations.last_approval_date), COALESCE(pr_aggregations.last_approval_date, pr_aggregations.last_commit_date))-first_reaction_date)) AS rework_time,\n      EXTRACT(EPOCH FROM (merged_date-GREATEST(pr_aggregations.last_approval_date, pr_aggregations.last_commit_date))) AS idle_after_approve,\n\n      author.id AS author_id,\n      COALESCE(author.team_role, pr.author_role) AS author_role,\n      requested_reviewers_count,\n      participants_comments_count,\n      tests_were_touched,\n      diff_rows_added,\n      diff_rows_deleted\n\n   FROM pull_request AS pr\n      INNER JOIN aggregations AS pr_aggregations\n                   ON pr.team_name = pr_aggregations.team_name AND pr.project_name = pr_aggregations.project_name\n                       AND pr.repository_name = pr_aggregations.repository_name\n                       AND pr.pull_request_number = pr_aggregations.pull_request_number\n      INNER JOIN actor AS shadowed_author ON shadowed_author.id = pr.author_id\n      INNER JOIN actor AS author ON COALESCE(shadowed_author.merged_with_id, shadowed_author.id)=author.id\n   WHERE pr.integrity_errors IS NULL\n      AND (COALESCE($team_name) IS NULL OR pr.team_name IN ($team_name))\n      AND (COALESCE($repository_name) IS NULL OR pr.repository_name IN ($repository_name))\n      AND (COALESCE($pr_author_role) IS NULL OR COALESCE(author.team_role, pr.author_role) IN ($pr_author_role))\n      AND (COALESCE($pr_author) IS NULL OR author.id IN ($pr_author))\n      AND ($include_bots_activities OR NOT author.is_bot_user)\n   ) AS timings\nWHERE \n   COALESCE(pr_lead_time, 0)>0\n   AND COALESCE(development_time, 0)>=0\n   AND COALESCE(time_to_first_reaction, 0)>=0\n   AND COALESCE(rework_time, 0)>=0\n   AND COALESCE(idle_after_approve, 0)>=0\nGROUP BY 1\nORDER BY $__timeGroup(start_date, $group_by_period, 0)",
                    "refId": "Flow stats",
                    "sql": {
                        "columns": [
                            {
                                "parameters": [],
                                "type": "function"
                            }
                        ],
                        "groupBy": [
                            {
                                "property": {
                                    "type": "string"
                                },
                                "type": "groupBy"
                            }
                        ],
                        "limit": 50
                    }
                }
            ],
            "title": "Flow stats by $group_by_period, ${percentile}",
            "type": "table"
        }
    ],
    "preload": false,
    "refresh": "",
    "schemaVersion": 40,
    "tags": [],
    "templating": {
        "list": [
            {
                "allValue": "NULL",
                "current": {
                    "text": [
                        "All"
                    ],
                    "value": [
                        "$__all"
                    ]
                },
                "datasource": {
                    "type": "postgres",
                    "uid": "e22e9e55-8040-415d-97be-c4a6a23429e8"
                },
                "definition": "SELECT DISTINCT team_name \nFROM pull_request\nWHERE pull_request.integrity_errors IS NULL\nAND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \nORDER BY team_name",
                "includeAll": true,
                "label": "Team",
                "multi": true,
                "name": "team_name",
                "options": [],
                "query": "SELECT DISTINCT team_name \nFROM pull_request\nWHERE pull_request.integrity_errors IS NULL\nAND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \nORDER BY team_name",
                "refresh": 1,
                "regex": "",
                "type": "query"
            },
            {
                "allValue": "NULL",
                "current": {
                    "text": [
                        "All"
                    ],
                    "value": [
                        "$__all"
                    ]
                },
                "datasource": {
                    "type": "postgres",
                    "uid": "e22e9e55-8040-415d-97be-c4a6a23429e8"
                },
                "definition": "SELECT DISTINCT (repository_name) \nFROM pull_request \nWHERE \n    pull_request.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR team_name IN ($team_name))    \nORDER BY repository_name",
                "includeAll": true,
                "label": "Repository name",
                "multi": true,
                "name": "repository_name",
                "options": [],
                "query": "SELECT DISTINCT (repository_name) \nFROM pull_request \nWHERE \n    pull_request.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR team_name IN ($team_name))    \nORDER BY repository_name",
                "refresh": 2,
                "regex": "",
                "sort": 1,
                "type": "query"
            },
            {
                "allValue": "NULL",
                "current": {
                    "text": [
                        "All"
                    ],
                    "value": [
                        "$__all"
                    ]
                },
                "datasource": {
                    "type": "grafana-postgresql-datasource",
                    "uid": "e22e9e55-8040-415d-97be-c4a6a23429e8"
                },
                "definition": "SELECT \n    DISTINCT author_role\nFROM pull_request \nWHERE pull_request.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR pull_request.team_name IN ($team_name))    \n    AND (COALESCE($repository_name) IS NULL OR repository_name IN ($repository_name))\nUNION\nSELECT \n    DISTINCT author.team_role\nFROM pull_request AS pr\n      INNER JOIN actor AS shadowed_author ON shadowed_author.id = pr.author_id\n      INNER JOIN actor AS author ON COALESCE(shadowed_author.merged_with_id, shadowed_author.id)=author.id\nWHERE author.team_role IS NOT NULL \n    AND pr.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR pr.team_name IN ($team_name))    \n    AND (COALESCE($repository_name) IS NULL OR pr.repository_name IN ($repository_name))\n",
                "description": "",
                "includeAll": true,
                "label": "Author role",
                "multi": true,
                "name": "pr_author_role",
                "options": [],
                "query": "SELECT \n    DISTINCT author_role\nFROM pull_request \nWHERE pull_request.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR pull_request.team_name IN ($team_name))    \n    AND (COALESCE($repository_name) IS NULL OR repository_name IN ($repository_name))\nUNION\nSELECT \n    DISTINCT author.team_role\nFROM pull_request AS pr\n      INNER JOIN actor AS shadowed_author ON shadowed_author.id = pr.author_id\n      INNER JOIN actor AS author ON COALESCE(shadowed_author.merged_with_id, shadowed_author.id)=author.id\nWHERE author.team_role IS NOT NULL \n    AND pr.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR pr.team_name IN ($team_name))    \n    AND (COALESCE($repository_name) IS NULL OR pr.repository_name IN ($repository_name))\n",
                "refresh": 1,
                "regex": "",
                "sort": 1,
                "type": "query"
            },
            {
                "allValue": "NULL",
                "current": {
                    "text": [
                        "All"
                    ],
                    "value": [
                        "$__all"
                    ]
                },
                "datasource": {
                    "type": "postgres",
                    "uid": "e22e9e55-8040-415d-97be-c4a6a23429e8"
                },
                "definition": "SELECT \nDISTINCT \nauthor.id as __value, \nCASE \n    WHEN author.is_former_participant THEN CONCAT(author.login, ' (former participant)') \n    WHEN author.is_bot_user THEN CONCAT(author.login, ' (bot)')\n    ELSE author.nickname\nEND AS __text \nFROM pull_request AS pr\n    INNER JOIN actor AS shadowed_author ON shadowed_author.id = pr.author_id\n    INNER JOIN actor AS author ON COALESCE(shadowed_author.merged_with_id, shadowed_author.id)=author.id\nWHERE pr.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR pr.team_name IN ($team_name))    \n    AND (COALESCE($repository_name) IS NULL OR pr.repository_name IN ($repository_name))\n    AND (COALESCE($pr_author_role) IS NULL OR COALESCE(author.team_role, pr.author_role) IN ($pr_author_role))\nORDER BY 2",
                "includeAll": true,
                "label": "PR author",
                "multi": true,
                "name": "pr_author",
                "options": [],
                "query": "SELECT \nDISTINCT \nauthor.id as __value, \nCASE \n    WHEN author.is_former_participant THEN CONCAT(author.login, ' (former participant)') \n    WHEN author.is_bot_user THEN CONCAT(author.login, ' (bot)')\n    ELSE author.nickname\nEND AS __text \nFROM pull_request AS pr\n    INNER JOIN actor AS shadowed_author ON shadowed_author.id = pr.author_id\n    INNER JOIN actor AS author ON COALESCE(shadowed_author.merged_with_id, shadowed_author.id)=author.id\nWHERE pr.integrity_errors IS NULL\n    AND $__timeFilter(LEAST(initial_commit_date, shared_for_review_date)) \n    AND (COALESCE($team_name) IS NULL OR pr.team_name IN ($team_name))    \n    AND (COALESCE($repository_name) IS NULL OR pr.repository_name IN ($repository_name))\n    AND (COALESCE($pr_author_role) IS NULL OR COALESCE(author.team_role, pr.author_role) IN ($pr_author_role))\nORDER BY 2",
                "refresh": 2,
                "regex": "",
                "type": "query"
            },
            {
                "current": {
                    "text": "repository_name",
                    "value": "repository_name"
                },
                "includeAll": false,
                "label": "Group by",
                "name": "group_by_field",
                "options": [
                    {
                        "selected": true,
                        "text": "Repository",
                        "value": "repository_name"
                    },
                    {
                        "selected": false,
                        "text": "Author",
                        "value": "author"
                    }
                ],
                "query": "Repository : repository_name, Author : author",
                "type": "custom"
            },
            {
                "current": {
                    "text": "False",
                    "value": "False"
                },
                "includeAll": false,
                "label": "Include bots activities",
                "name": "include_bots_activities",
                "options": [
                    {
                        "selected": true,
                        "text": "No",
                        "value": "False"
                    },
                    {
                        "selected": false,
                        "text": "Yes",
                        "value": "True"
                    }
                ],
                "query": "No : False,Yes : True",
                "type": "custom"
            },
            {
                "current": {
                    "text": "0.75",
                    "value": "0.75"
                },
                "description": "",
                "label": "Percentile",
                "name": "percentile",
                "options": [
                    {
                        "selected": false,
                        "text": "50th percentile (mean)",
                        "value": "0.50"
                    },
                    {
                        "selected": true,
                        "text": "75th percentile",
                        "value": "0.75"
                    },
                    {
                        "selected": false,
                        "text": "90th percentile",
                        "value": "0.90"
                    },
                    {
                        "selected": false,
                        "text": "95th percentile",
                        "value": "0.95"
                    },
                    {
                        "selected": false,
                        "text": "99th percentile",
                        "value": "0.99"
                    },
                    {
                        "selected": false,
                        "text": "100% values",
                        "value": "1"
                    }
                ],
                "query": "50th percentile (mean) : 0.50, 75th percentile : 0.75, 90th percentile : 0.90, 95th percentile : 0.95, 99th percentile : 0.99, 100% values : 1",
                "type": "custom"
            },
            {
                "current": {
                    "text": "3M",
                    "value": "3M"
                },
                "includeAll": false,
                "label": "Group by period",
                "name": "group_by_period",
                "options": [
                    {
                        "selected": false,
                        "text": "Days",
                        "value": "1d"
                    },
                    {
                        "selected": false,
                        "text": "Weeks",
                        "value": "1w"
                    },
                    {
                        "selected": false,
                        "text": "Months",
                        "value": "1M"
                    },
                    {
                        "selected": true,
                        "text": "Quarters",
                        "value": "3M"
                    },
                    {
                        "selected": false,
                        "text": "Years",
                        "value": "1y"
                    }
                ],
                "query": "Days : 1d,  Weeks : 1w, Months : 1M, Quarters : 3M, Years : 1y",
                "type": "custom"
            }
        ]
    },
    "time": {
        "from": "now-10y",
        "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "PR metrics: Aggregated Data",
    "uid": "fe47lcr8hiltse",
    "version": 1,
    "weekStart": ""
}